source [find target/Hi3716MV430-BUSJTAG/Hi3716MV430_otp_STBM.cfg]

proc write_chip_jtag_prt_mode {{flag 0x42}} {
    puts stdout "************************************************"
	puts stdout "*          write jtag_prt_mode                 *"
	puts stdout "************************************************"
	
	if {$flag != 0x42} {
		#write byte 0x51
		set byte51 $flag
		write_otp_byte 0x51 $byte51	
	}
}

proc write_hardware_disable {} {
    puts stdout "**********************************************************"
	puts stdout "* write uart/FEMAC/USB2.0 hardward disabled flag and lock "
	puts stdout "**********************************************************"

	global hard_uart_mcu_disable
	global hard_femac_disable
	global hard_usb2_disable
	
	set bit34_5 0x0
	set bit34_6 0x0
	set bit34_7 0x0
	set bit134_5 0x0
	set bit134_6 0x0
	set bit134_7 0x0
	
	if { [info exists hard_uart_mcu_disable ] } {
	    set bit34_5 [expr $hard_uart_mcu_disable << 5]
		set bit134_5 [expr 0x1 << 5]
	}
	if { [info exists hard_femac_disable ] } {
	    set bit34_6 [expr $hard_femac_disable << 6]
		set bit134_6 [expr 0x1 << 6]
	}
	if { [info exists hard_usb2_disable ] } {
	    set bit34_7 [expr $hard_usb2_disable << 7]
		set bit134_7 [expr 0x1 << 7]
	}
	#write byte 0x34
	set byte34 [expr $bit34_5 | $bit34_6 | $bit34_7]
	if {$byte34 != 0x0} {
	    write_otp_byte 0x34 $byte34
	}
	#write byte 0x134, lock
	set byte134 [expr $bit134_5 | $bit134_6 | $bit134_7]
	if {$byte134 != 0x0} {
	    write_otp_byte 0x134 $byte134
	}	
}

proc write_SCS_activation {{flag 0x0}} {
    puts stdout "************************************************"
	puts stdout "*          write SCS_activation                 *"
	puts stdout "************************************************"
	#write byte 0xad
	if {$flag != 0} {
		#write byte 0x50
		set byte50 0xff
		write_otp_byte 0x50 $byte50	
	}
}

proc write_RootKey {} {
    puts stdout "**********************************************************"
	puts stdout "* write STBM_R2R_RootKey/HDCP_RootKey/SW_RootKey and crc *"
	puts stdout "**********************************************************"
    global STBM_R2R_RootKey_0_31  
    global STBM_R2R_RootKey_32_63 	
    global STBM_R2R_RootKey_64_95 	
    global STBM_R2R_RootKey_96_127	
	
	global HDCP_RootKey_0_31
	global HDCP_RootKey_32_63
	global HDCP_RootKey_64_95
	global HDCP_RootKey_96_127

	global SW_RootKey_0_31   
	global SW_RootKey_32_63  
	global SW_RootKey_64_95  
	global SW_RootKey_96_127
	
    global CRC_STBM_R2R_RootKey
	global CRC_HDCP_RootKey
	global CRC_SW_RootKey
	
	#write STBM_R2R_RootKey, byte 0x280-0x28f
	if { [info exists STBM_R2R_RootKey_0_31 ] } {
	    if { $STBM_R2R_RootKey_0_31 != 0 } {
		    for {set i 0} {$i < 4} {incr i} {
			    set byteai [expr $STBM_R2R_RootKey_0_31 & 0xff]
			    write_otp_byte [expr 0x280 + $i] $byteai
			    set STBM_R2R_RootKey_0_31 [expr $STBM_R2R_RootKey_0_31 >> 8]		
		    }	
	    }
	}
	if { [info exists STBM_R2R_RootKey_32_63 ] } {
		if { $STBM_R2R_RootKey_32_63 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $STBM_R2R_RootKey_32_63 & 0xff]
				write_otp_byte [expr 0x284 + $i] $byteai
				set STBM_R2R_RootKey_32_63 [expr $STBM_R2R_RootKey_32_63 >> 8]		
			}
		}
	}
	if { [info exists STBM_R2R_RootKey_64_95 ] } {
		if { $STBM_R2R_RootKey_64_95 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $STBM_R2R_RootKey_64_95 & 0xff]
				write_otp_byte [expr 0x288 + $i] $byteai
				set STBM_R2R_RootKey_64_95 [expr $STBM_R2R_RootKey_64_95 >> 8]		
			}
		}
	}
	if { [info exists STBM_R2R_RootKey_96_127 ] } {
		if { $STBM_R2R_RootKey_96_127 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $STBM_R2R_RootKey_96_127 & 0xff]
				write_otp_byte [expr 0x28c + $i] $byteai
				set STBM_R2R_RootKey_96_127 [expr $STBM_R2R_RootKey_96_127 >> 8]		
			}
		}
	}
	
	#write HDCP_RootKey, byte 0x290-0x29f
	if { [info exists HDCP_RootKey_0_31 ] } {
		if { $HDCP_RootKey_0_31 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $HDCP_RootKey_0_31 & 0xff]
				write_otp_byte [expr 0x290 + $i] $byteai
				set HDCP_RootKey_0_31 [expr $HDCP_RootKey_0_31 >> 8]		
			}	
		}
	}
	if { [info exists HDCP_RootKey_32_63 ] } {
		if { $HDCP_RootKey_32_63 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $HDCP_RootKey_32_63 & 0xff]
				write_otp_byte [expr 0x294 + $i] $byteai
				set HDCP_RootKey_32_63 [expr $HDCP_RootKey_32_63 >> 8]		
			}
		}
	}
	if { [info exists HDCP_RootKey_64_95 ] } {
		if { $HDCP_RootKey_64_95 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $HDCP_RootKey_64_95 & 0xff]
				write_otp_byte [expr 0x298 + $i] $byteai
				set HDCP_RootKey_64_95 [expr $HDCP_RootKey_64_95 >> 8]		
			}
		}
	}
	if { [info exists HDCP_RootKey_96_127 ] } {
		if { $HDCP_RootKey_96_127 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $HDCP_RootKey_96_127 & 0xff]
				write_otp_byte [expr 0x29c + $i] $byteai
				set HDCP_RootKey_96_127 [expr $HDCP_RootKey_96_127 >> 8]		
			}
		}
	}
	#write SW_RootKey, byte 0x2b0-0x2bf
	if { [info exists SW_RootKey_0_31 ] } {
		if { $SW_RootKey_0_31 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $SW_RootKey_0_31 & 0xff]
				write_otp_byte [expr 0x2b0 + $i] $byteai
				set SW_RootKey_0_31 [expr $SW_RootKey_0_31 >> 8]		
			}	
		}
	}
	
	if { [info exists SW_RootKey_32_63 ] } {
		if { $SW_RootKey_32_63 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $SW_RootKey_32_63 & 0xff]
				write_otp_byte [expr 0x2b4 + $i] $byteai
				set SW_RootKey_32_63 [expr $SW_RootKey_32_63 >> 8]		
			}
		}
	}
	if { [info exists SW_RootKey_64_95 ] } {
		if { $SW_RootKey_64_95 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $SW_RootKey_64_95 & 0xff]
				write_otp_byte [expr 0x2b8 + $i] $byteai
				set SW_RootKey_64_95 [expr $SW_RootKey_64_95 >> 8]		
			}
		}
	}
	if { [info exists SW_RootKey_96_127 ] } {
		if { $SW_RootKey_96_127 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $SW_RootKey_96_127 & 0xff]
				write_otp_byte [expr 0x2bc + $i] $byteai
				set SW_RootKey_96_127 [expr $SW_RootKey_96_127 >> 8]		
			}
		}
	}
	#write STBM_R2R_RootKey_lock, HDCP_RootKey_lock, SW_RootKey_lock
	set bit14d_0 0x0
	set bit14d_1 0x0
	set bit14d_3 0x0
	if {[info exists STBM_R2R_RootKey_0_31 ] || [info exists STBM_R2R_RootKey_32_63 ] || [info exists STBM_R2R_RootKey_64_95 ] || [info exists STBM_R2R_RootKey_96_127 ]} {
		set bit14d_0 0x1
	}
	if {[info exists HDCP_RootKey_0_31 ] || [info exists HDCP_RootKey_32_63 ] || [info exists HDCP_RootKey_64_95 ] || [info exists HDCP_RootKey_96_127 ]} {
		set bit14d_1 [expr 0x1 << 1]
	}
	if {[info exists SW_RootKey_0_31 ] || [info exists SW_RootKey_32_63 ] || [info exists SW_RootKey_64_95 ] || [info exists SW_RootKey_96_127 ]} {
		set bit14d_3 [expr 0x1 << 3]
	}
    if {$bit14d_0 != 0 || $bit14d_1 != 0 || $bit14d_3 != 0}	{
	    set byte14d [expr $bit14d_0 | $bit14d_1 | $bit14d_3]
	    write_otp_byte 0x14d $byte14d	
	}
		
	set bit15a_0 0x0
	set bit15a_1 0x0
	set bit15a_3 0x0
	if {[info exists CRC_STBM_R2R_RootKey ] } {
		if {$CRC_STBM_R2R_RootKey != 0x0} {
		    #CRC_STBM_R2R_RootKey, byte 350
			set byte350 $CRC_STBM_R2R_RootKey
			write_otp_byte 0x350 $byte350
		}
		set bit15a_0 0x1
	}
	
	if {[info exists CRC_HDCP_RootKey ]} {
		if {$CRC_HDCP_RootKey != 0x0} {
			#CRC_HDCP_RootKey, byte 351
			set byte351 $CRC_HDCP_RootKey
			write_otp_byte 0x351 $byte351
		}
		set bit15a_1 [expr 0x1 << 1]
	}
	
	if {[info exists CRC_SW_RootKey ]} {
		if {$CRC_SW_RootKey != 0x0} {
			#CRC_SW_RootKey, byte 353
			set byte353 $CRC_SW_RootKey
			write_otp_byte 0x353 $byte353
		}
		set bit15a_3 [expr 0x1 << 3]
	}
	
	 if {$bit15a_0 !=0 || $bit15a_1 != 0 || $bit15a_3 != 0}	{
	    set byte15a [expr $bit15a_0 | $bit15a_1 | $bit15a_3]
	    write_otp_byte 0x15a $byte15a	
	}	
}

proc write_PANDA_FW_DEC_KEY {} {
    puts stdout "***************************************"
	puts stdout "* write PANDA_FW_DEC_KEY and lock     *"
	puts stdout "***************************************"
	
	global PANDA_FW_DEC_KEY_0_31  
	global PANDA_FW_DEC_KEY_32_63 
	global PANDA_FW_DEC_KEY_64_95 
	global PANDA_FW_DEC_KEY_96_127
	
	#write HDCP_RootKey, byte 0x270-0x27f
	if {[info exists PANDA_FW_DEC_KEY_0_31 ]} {
		if { $PANDA_FW_DEC_KEY_0_31 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $PANDA_FW_DEC_KEY_0_31 & 0xff]
				write_otp_byte [expr 0x270 + $i] $byteai
				set PANDA_FW_DEC_KEY_0_31 [expr $PANDA_FW_DEC_KEY_0_31 >> 8]		
			}	
		}
	}
	if {[info exists PANDA_FW_DEC_KEY_32_63 ]} {
		if { $PANDA_FW_DEC_KEY_32_63 != 0 } {
			for {set i 0} {$i < 4} {incr i} {
				set byteai [expr $PANDA_FW_DEC_KEY_32_63 & 0xff]
				write_otp_byte [expr 0x274 + $i] $byteai
				set PANDA_FW_DEC_KEY_32_63 [expr $PANDA_FW_DEC_KEY_32_63 >> 8]		
			}
		}
	}
	if {[info exists PANDA_FW_DEC_KEY_64_95 ]} {
	if { $PANDA_FW_DEC_KEY_64_95 != 0 } {
		for {set i 0} {$i < 4} {incr i} {
			set byteai [expr $PANDA_FW_DEC_KEY_64_95 & 0xff]
			write_otp_byte [expr 0x278 + $i] $byteai
			set PANDA_FW_DEC_KEY_64_95 [expr $PANDA_FW_DEC_KEY_64_95 >> 8]		
		}
	}
	}
	if {[info exists PANDA_FW_DEC_KEY_96_127 ]} {
	if { $PANDA_FW_DEC_KEY_96_127 != 0 } {
		for {set i 0} {$i < 4} {incr i} {
			set byteai [expr $PANDA_FW_DEC_KEY_96_127 & 0xff]
			write_otp_byte [expr 0x27c + $i] $byteai
			set PANDA_FW_DEC_KEY_96_127 [expr $PANDA_FW_DEC_KEY_96_127 >> 8]		
		}
	}
	}
	#write PANDA_FW_DEC_KEY_lock
	if {[info exists PANDA_FW_DEC_KEY_0_31 ] || [info exists PANDA_FW_DEC_KEY_32_63 ] || [info exists PANDA_FW_DEC_KEY_64_95 ] || [info exists PANDA_FW_DEC_KEY_96_127 ]} {
		set bit147_7 [expr 0x1 << 7]
		set byte147 $bit147_7
		write_otp_byte 0x147 $byte147
	}
}

proc write_otp_other_1 {} {
    puts stdout "*******************************************************"
	puts stdout "* write ts_tdes_disable/ts_csa2_hardonly_en            "
	puts stdout "* /ts_sp_hardonly_en/ts_csa3_hardonly_en              *"
	puts stdout "* /ts_ciplus_hardonly_en/ts_sp_hardonly_en_2 and lock *"
	puts stdout "*******************************************************"

	#write byte 8
	set bit8_3 [expr 1 << 3] 
	set byte8 $bit8_3
	write_otp_byte 0x8 $byte8	

	#write byte 9
	set bit9_0 0x1
	set bit9_1 [expr 0x1 << 1]
	set bit9_2 [expr 0x1 << 2]
	set bit9_3 [expr 0x1 << 3]
	set bit9_5 [expr 0x1 << 5]
	set byte9 [expr  $bit9_0 | $bit9_1 | $bit9_2 | $bit9_3 | $bit9_5]
	write_otp_byte 0x9 $byte9	
	
	#write byte 0x108, ts_tdes_disable_lock
	set bit108_3 [expr 1 << 3] 
	set byte108 $bit108_3
	write_otp_byte 0x108 $byte108	
	
	#write byte 0x109, lock
	set bit109_0 0x1
	set bit109_1 [expr 0x1 << 1]
	set bit109_2 [expr 0x1 << 2]
	set bit109_3 [expr 0x1 << 3]
	set bit109_5 [expr 0x1 << 5]
	set byte109 [expr  $bit109_0 | $bit109_1 | $bit109_2 | $bit109_3 | $bit109_5]
	write_otp_byte 0x109 $byte109	
}

# runtime_check_en, ddr_wakeup_disable
proc write_otp_other_3 {} {
    puts stdout "**********************************************************"
	puts stdout "* write runtime_check_en/ddr_wakeup_disable and lock     *"
	puts stdout "**********************************************************"
	global ddr_wakeup_disable
	
	
	if { [info exists ddr_wakeup_disable ] } {
		if {$ddr_wakeup_disable != 0x0} {
		    #write byte 2
	        set bit2_0 0x1
	        set byte2 $bit2_0
	        write_otp_byte 0x2 $byte2
		}
		
		#write byte 102, ddr_wakeup_disable_lock
	    set bit102_0 0x1
	    set byte102 $bit102_0
	    write_otp_byte 0x102 $byte102
	}	
	
	#write byte 4, runtime_check_en
	set bit4_1 [expr 0x1 << 1]
	set byte4 $bit4_1
	write_otp_byte 0x4 $byte4
	
	#write byte 0x104, runtime_check_en_lock
	set bit104_1 [expr 0x1 << 1]
	set byte104  $bit104_1
	write_otp_byte 0x104 $byte104	
}

proc write_otp_other_4 {} {
    puts stdout "************************************************"
	puts stdout "*            write otp other 4                   *"
	puts stdout "************************************************"
	global boot_mode_sel
	global bload_dec_en
	global HSL_CA_verify_en
	global STB_Version_REF
	global cardless_indicator
	global MSID
	
	#write byte 0, boot_mode_sel
	if { [info exists boot_mode_sel ] } {	
	    set byte0 $boot_mode_sel
	    write_otp_byte 0x0 $byte0
	
		#write byte 0x100, boot_mode_sel_lock
	    set byte100 0xff
	    write_otp_byte 0x100 $byte100
	}
	
	#write byte 1, bootsel_ctrl, bload_dec_en
	#write byte 101, bootsel_ctrl_lock ,bload_dec_en_lock
	set bit1_0 0x1
	set bit101_0 0x1
	set bit1_1 0x0
	set bit101_1 0x0
	if { [info exists bload_dec_en ] } {
	    set bit1_1 [expr ($bload_dec_en & 0x1) << 1]
		set bit101_1 [expr 0x1 << 1]
	}
	set byte1 [expr $bit1_0 | $bit1_1]
	write_otp_byte 0x1 $byte1	
	set byte101 [expr $bit101_0 | $bit101_1]
	write_otp_byte 0x101 $byte101
	
	#write byte 0x41
	if { [info exists HSL_CA_verify_en ] } {
	    if {$HSL_CA_verify_en != 0xa} {
	        set bit41_4 0xf
	        set byte41 $bit41_4 
	        write_otp_byte 0x41 $byte41
	    }
	}
	
	#write STB_Version_REF, byte 0x58-0x5b
	if { [info exists STB_Version_REF ] } {
	    if {$STB_Version_REF != 0} {
	        for {set i 0} {$i < 4} {incr i} {
		        set byteai [expr $STB_Version_REF & 0xff]
		        write_otp_byte [expr 0x58 + $i] $byteai
		        set STB_Version_REF [expr $STB_Version_REF >> 8]		
	        }
		}
	}
	
	#write byte 0x5f
	if { [info exists cardless_indicator ] } {
	    if {$cardless_indicator != 0x0} {
	        set bit5f_2 [expr $cardless_indicator << 2]
	        set byte5f $bit5f_2
	        write_otp_byte 0x5f $byte5f
		}
	}
	
	#write MSID, byte 0xe0-0xe3
	if { [info exists MSID ] } {
	    for {set i 0} {$i < 4} {incr i} {
		    set byteei [expr $MSID & 0xff]
		    write_otp_byte [expr 0xe0 + $i] $byteei
		    set MSID [expr $MSID >> 8]		
	    }
	    #write msid_lock 0x144
		set bit144_0 0x1
		set byte144 $bit144_0
		write_otp_byte 0x144 $byte144
	}
	
}

proc write_otp_all {} {
	global chip_jtag_prt_mode
	global SCS_activation
	
	write_otp_other_1
	write_otp_other_3
	write_otp_other_4
	
	if { [info exists SCS_activation ] } {	
	    write_SCS_activation $SCS_activation
	}
	
    #write_hardware_disable
    if { [info exists chip_jtag_prt_mode ] } {	
	    write_chip_jtag_prt_mode $chip_jtag_prt_mode
	}
	
	write_PANDA_FW_DEC_KEY
    write_RootKey
}